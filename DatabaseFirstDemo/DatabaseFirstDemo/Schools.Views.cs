//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(DatabaseFirstDemo.SchoolEntities),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySetsfb11e3039e4a907e5ec2526a0ac910fca8b9b37d3481b116d409b1c3bac77dbe))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework Power Tools", "0.9.0.0")]
    internal sealed class ViewsForBaseEntitySetsfb11e3039e4a907e5ec2526a0ac910fca8b9b37d3481b116d409b1c3bac77dbe : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "fb11e3039e4a907e5ec2526a0ac910fca8b9b37d3481b116d409b1c3bac77dbe"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "SchoolModelStoreContainer.Course")
            {
                return GetView0();
            }

            if (extentName == "SchoolModelStoreContainer.Department")
            {
                return GetView1();
            }

            if (extentName == "SchoolModelStoreContainer.OnsiteCourse")
            {
                return GetView2();
            }

            if (extentName == "SchoolModelStoreContainer.Person")
            {
                return GetView3();
            }

            if (extentName == "SchoolModelStoreContainer.OfficeAssignment")
            {
                return GetView4();
            }

            if (extentName == "SchoolModelStoreContainer.StudentGrade")
            {
                return GetView5();
            }

            if (extentName == "SchoolModelStoreContainer.OnlineCourse")
            {
                return GetView6();
            }

            if (extentName == "SchoolModelStoreContainer.CourseInstructor")
            {
                return GetView7();
            }

            if (extentName == "SchoolEntities.Courses")
            {
                return GetView8();
            }

            if (extentName == "SchoolEntities.Departments")
            {
                return GetView9();
            }

            if (extentName == "SchoolEntities.OnsiteCourses")
            {
                return GetView10();
            }

            if (extentName == "SchoolEntities.People")
            {
                return GetView11();
            }

            if (extentName == "SchoolEntities.StudentGrades")
            {
                return GetView12();
            }

            if (extentName == "SchoolEntities.OnlineCourses")
            {
                return GetView13();
            }

            if (extentName == "SchoolEntities.CourseInstructor")
            {
                return GetView14();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for SchoolModelStoreContainer.Course.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Course
        [SchoolModel.Store.Course](T1.Course_CourseID, T1.Course_Title, T1.Course_Credits, T1.Course_DepartmentID)
    FROM (
        SELECT 
            T.CourseID AS Course_CourseID, 
            T.Name AS Course_Title, 
            T.Credits AS Course_Credits, 
            T.DepartmentID AS Course_DepartmentID, 
            True AS _from0
        FROM SchoolEntities.Courses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolModelStoreContainer.Department.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Department
        [SchoolModel.Store.Department](T1.Department_DepartmentID, T1.Department_Name, T1.Department_Budget, T1.Department_StartDate, T1.Department_Administrator)
    FROM (
        SELECT 
            T.DepartmentID AS Department_DepartmentID, 
            T.Name AS Department_Name, 
            T.Budget AS Department_Budget, 
            T.StartDate AS Department_StartDate, 
            T.Administrator AS Department_Administrator, 
            True AS _from0
        FROM SchoolEntities.Departments AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolModelStoreContainer.OnsiteCourse.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing OnsiteCourse
        [SchoolModel.Store.OnsiteCourse](T1.OnsiteCourse_CourseID, T1.OnsiteCourse_Location, T1.OnsiteCourse_Days, T1.OnsiteCourse_Time)
    FROM (
        SELECT 
            T.CourseID AS OnsiteCourse_CourseID, 
            T.Location AS OnsiteCourse_Location, 
            T.Days AS OnsiteCourse_Days, 
            T.Time AS OnsiteCourse_Time, 
            True AS _from0
        FROM SchoolEntities.OnsiteCourses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolModelStoreContainer.Person.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Person
        [SchoolModel.Store.Person](T1.Person_PersonID, T1.Person_LastName, T1.Person_FirstName, T1.Person_HireDate, T1.Person_EnrollmentDate, T1.Person_Timestamp)
    FROM (
        SELECT 
            T.PersonID AS Person_PersonID, 
            T.LastName AS Person_LastName, 
            T.FirstName AS Person_FirstName, 
            TREAT(T AS [SchoolModel.Instructor]).HireDate AS Person_HireDate, 
            TREAT(T AS [SchoolModel.Student]).EnrollmentDate AS Person_EnrollmentDate, 
            T.Timestamp AS Person_Timestamp, 
            True AS _from0, 
            CASE WHEN T IS OF (ONLY [SchoolModel.Instructor]) THEN True ELSE False END AS _from1, 
            CASE WHEN T IS OF (ONLY [SchoolModel.Student]) THEN True ELSE False END AS _from2
        FROM SchoolEntities.People AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolModelStoreContainer.OfficeAssignment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing OfficeAssignment
        [SchoolModel.Store.OfficeAssignment](T1.OfficeAssignment_InstructorID, T1.OfficeAssignment_Location, T1.OfficeAssignment_Timestamp)
    FROM (
        SELECT 
            T.PersonID AS OfficeAssignment_InstructorID, 
            TREAT(T AS [SchoolModel.Instructor]).Location AS OfficeAssignment_Location, 
            CAST(NULL AS [Edm.Binary]) AS OfficeAssignment_Timestamp, 
            True AS _from0
        FROM SchoolEntities.People AS T
        WHERE T IS OF (ONLY [SchoolModel.Instructor])
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolModelStoreContainer.StudentGrade.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StudentGrade
        [SchoolModel.Store.StudentGrade](T1.StudentGrade_EnrollmentID, T1.StudentGrade_CourseID, T1.StudentGrade_StudentID, T1.StudentGrade_Grade)
    FROM (
        SELECT 
            T.EnrollmentID AS StudentGrade_EnrollmentID, 
            T.CourseID AS StudentGrade_CourseID, 
            T.StudentID AS StudentGrade_StudentID, 
            T.Grade AS StudentGrade_Grade, 
            True AS _from0
        FROM SchoolEntities.StudentGrades AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolModelStoreContainer.OnlineCourse.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing OnlineCourse
        [SchoolModel.Store.OnlineCourse](T1.OnlineCourse_CourseID, T1.OnlineCourse_URL)
    FROM (
        SELECT 
            T.CourseID AS OnlineCourse_CourseID, 
            T.URL AS OnlineCourse_URL, 
            True AS _from0
        FROM SchoolEntities.OnlineCourses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolModelStoreContainer.CourseInstructor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CourseInstructor
        [SchoolModel.Store.CourseInstructor](T1.CourseInstructor_CourseID, T1.CourseInstructor_PersonID)
    FROM (
        SELECT 
            Key(T.Course).CourseID AS CourseInstructor_CourseID, 
            Key(T.Instructor).PersonID AS CourseInstructor_PersonID, 
            True AS _from0
        FROM SchoolEntities.CourseInstructor AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolEntities.Courses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Courses
        [SchoolModel.Course](T1.Course_CourseID, T1.Course_Name, T1.Course_Credits, T1.Course_DepartmentID)
    FROM (
        SELECT 
            T.CourseID AS Course_CourseID, 
            T.Title AS Course_Name, 
            T.Credits AS Course_Credits, 
            T.DepartmentID AS Course_DepartmentID, 
            True AS _from0
        FROM SchoolModelStoreContainer.Course AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolEntities.Departments.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Departments
        [SchoolModel.Department](T1.Department_DepartmentID, T1.Department_Name, T1.Department_Budget, T1.Department_StartDate, T1.Department_Administrator)
    FROM (
        SELECT 
            T.DepartmentID AS Department_DepartmentID, 
            T.Name AS Department_Name, 
            T.Budget AS Department_Budget, 
            T.StartDate AS Department_StartDate, 
            T.Administrator AS Department_Administrator, 
            True AS _from0
        FROM SchoolModelStoreContainer.Department AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolEntities.OnsiteCourses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing OnsiteCourses
        [SchoolModel.OnsiteCourse](T1.OnsiteCourse_CourseID, T1.OnsiteCourse_Location, T1.OnsiteCourse_Days, T1.OnsiteCourse_Time)
    FROM (
        SELECT 
            T.CourseID AS OnsiteCourse_CourseID, 
            T.Location AS OnsiteCourse_Location, 
            T.Days AS OnsiteCourse_Days, 
            T.Time AS OnsiteCourse_Time, 
            True AS _from0
        FROM SchoolModelStoreContainer.OnsiteCourse AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolEntities.People.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing People
        CASE
            WHEN (NOT(T3._from1) AND NOT(T3._from3)) THEN [SchoolModel.Person](T3.Person_PersonID, T3.Person_LastName, T3.Person_FirstName, T3.Person_Timestamp)
            WHEN T3._from1 THEN [SchoolModel.Instructor](T3.Person_PersonID, T3.Person_LastName, T3.Person_FirstName, T3.Person_Timestamp, T3.Instructor_HireDate, T3.Instructor_Location)
            ELSE [SchoolModel.Student](T3.Person_PersonID, T3.Person_LastName, T3.Person_FirstName, T3.Person_Timestamp, T3.Student_EnrollmentDate)
        END
    FROM (
        SELECT T1.Person_PersonID, T1.Person_LastName, T1.Person_FirstName, T1.Person_Timestamp, T1.Instructor_HireDate, T2.Instructor_Location, T1.Student_EnrollmentDate, T1._from0, T1._from1, (T2._from2 AND T2._from2 IS NOT NULL) AS _from2, T1._from3
        FROM  (
            SELECT 
                T.PersonID AS Person_PersonID, 
                T.LastName AS Person_LastName, 
                T.FirstName AS Person_FirstName, 
                T.Timestamp AS Person_Timestamp, 
                T.HireDate AS Instructor_HireDate, 
                T.EnrollmentDate AS Student_EnrollmentDate, 
                True AS _from0, 
                CASE WHEN T.HireDate IS NOT NULL THEN True ELSE False END AS _from1, 
                CASE WHEN T.EnrollmentDate IS NOT NULL THEN True ELSE False END AS _from3
            FROM SchoolModelStoreContainer.Person AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                T.InstructorID AS Person_PersonID, 
                T.Location AS Instructor_Location, 
                True AS _from2
            FROM SchoolModelStoreContainer.OfficeAssignment AS T) AS T2
            ON T1.Person_PersonID = T2.Person_PersonID
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for SchoolEntities.StudentGrades.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing StudentGrades
        [SchoolModel.StudentGrade](T1.StudentGrade_EnrollmentID, T1.StudentGrade_CourseID, T1.StudentGrade_StudentID, T1.StudentGrade_Grade)
    FROM (
        SELECT 
            T.EnrollmentID AS StudentGrade_EnrollmentID, 
            T.CourseID AS StudentGrade_CourseID, 
            T.StudentID AS StudentGrade_StudentID, 
            T.Grade AS StudentGrade_Grade, 
            True AS _from0
        FROM SchoolModelStoreContainer.StudentGrade AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolEntities.OnlineCourses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing OnlineCourses
        [SchoolModel.OnlineCourse](T1.OnlineCourse_CourseID, T1.OnlineCourse_URL)
    FROM (
        SELECT 
            T.CourseID AS OnlineCourse_CourseID, 
            T.URL AS OnlineCourse_URL, 
            True AS _from0
        FROM SchoolModelStoreContainer.OnlineCourse AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for SchoolEntities.CourseInstructor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing CourseInstructor
        [SchoolModel.CourseInstructor](T3.CourseInstructor_Course, T3.CourseInstructor_Instructor)
    FROM (
        SELECT -- Constructing Course
            CreateRef(SchoolEntities.Courses, row(T2.CourseInstructor_Course_CourseID), [SchoolModel.Course]) AS CourseInstructor_Course, 
            T2.CourseInstructor_Instructor
        FROM (
            SELECT -- Constructing Instructor
                T1.CourseInstructor_Course_CourseID, 
                CreateRef(SchoolEntities.People, row(T1.CourseInstructor_Instructor_PersonID), [SchoolModel.Instructor]) AS CourseInstructor_Instructor
            FROM (
                SELECT 
                    T.CourseID AS CourseInstructor_Course_CourseID, 
                    T.PersonID AS CourseInstructor_Instructor_PersonID, 
                    True AS _from0
                FROM SchoolModelStoreContainer.CourseInstructor AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }
    }
}
